import React, { useState, useEffect } from 'react';

// CSS styles (Th√™m n√∫t S·ª≠a/C·∫£nh b√°o)
const styles = {
  table: { width: '100%', borderCollapse: 'collapse', marginTop: '20px' },
  tableCell: { border: '1px solid #ddd', padding: '12px', textAlign: 'left' },
  tableHeader: { border: '1px solid #ddd', padding: '12px', textAlign: 'left', backgroundColor: '#004aad', color: 'white', fontWeight: 'bold' },
  formContainer: {
    background: '#f9f9f9',
    padding: '20px',
    borderRadius: '8px',
    marginBottom: '20px'
  },
  formGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
    gap: '15px'
  },
  formGroup: {
    display: 'flex',
    flexDirection: 'column'
  },
  label: {
    marginBottom: '5px',
    fontWeight: '600'
  },
  input: {
    padding: '8px',
    border: '1px solid #ccc',
    borderRadius: '4px'
  },
  button: {
    padding: '8px 12px',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    color: 'white',
    marginRight: '5px'
  },
  btnPrimary: {
    backgroundColor: '#004aad' // N√∫t Th√™m/L∆∞u
  },
  btnDanger: {
    backgroundColor: '#f44336' // N√∫t X√≥a
  },
  // --- TH√äM M·ªöI ---
  btnWarning: {
    backgroundColor: '#ff9800' // N√∫t S·ª≠a
  },
  btnSecondary: {
    backgroundColor: '#6c757d' // N√∫t H·ªßy
  },
  searchContainer: {
    marginBottom: '20px'
  }
  // --- H·∫æT TH√äM M·ªöI ---
};

// State ban ƒë·∫ßu cho form (ƒë·ªÉ d·ªÖ d√†ng reset)
const initialFormData = {
  employee_code: '',
  full_name: '',
  department: '',
  position: '',
  email: '',
  phone: ''
};

function EmployeeList() {
  // State cho danh s√°ch
  const [employees, setEmployees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // State cho Form
  const [formData, setFormData] = useState(initialFormData);
  const [apiError, setApiError] = useState(null); 

  // --- TH√äM M·ªöI: State cho vi·ªác S·ª≠a v√† T√¨m ki·∫øm ---
  const [editingId, setEditingId] = useState(null); // L∆∞u ID c·ªßa nh√¢n vi√™n ƒëang s·ª≠a
  const [searchTerm, setSearchTerm] = useState(''); // L∆∞u n·ªôi dung √¥ t√¨m ki·∫øm

  // H√†m fetch (READ) (N√ÇNG C·∫§P)
  // Gi·ªù s·∫Ω fetch d·ª±a tr√™n searchTerm
  const fetchEmployees = (currentSearchTerm) => {
    setLoading(true);
    // M√£ h√≥a searchTerm ƒë·ªÉ an to√†n cho URL
    const encodedSearchTerm = encodeURIComponent(currentSearchTerm);
    
    // G·∫Øn searchTerm v√†o URL
    fetch(`http://localhost:3001/api/employees?search=${encodedSearchTerm}`)
      .then(response => {
        if (!response.ok) throw new Error('Failed to fetch employees');
        return response.json();
      })
      .then(data => {
        setEmployees(data);
        setLoading(false);
      })
      .catch(error => {
        console.error("L·ªói API Nh√¢n s·ª±:", error);
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n s·ª±.");
        setLoading(false);
      });
  };

  // Ch·∫°y h√†m fetch khi component t·∫£i (ch·ªâ 1 l·∫ßn)
  useEffect(() => {
    fetchEmployees(''); // T·∫£i t·∫•t c·∫£ l√∫c ban ƒë·∫ßu
  }, []);
  
  // --- TH√äM M·ªöI: X·ª≠ l√Ω g√µ v√†o √¥ T√åM KI·∫æM ---
  const handleSearchChange = (e) => {
      setSearchTerm(e.target.value);
  };

  // --- TH√äM M·ªöI: X·ª≠ l√Ω khi nh·∫•n n√∫t T√åM KI·∫æM ---
  const handleSearchSubmit = (e) => {
      e.preventDefault();
      // G·ªçi API v·ªõi searchTerm hi·ªán t·∫°i
      fetchEmployees(searchTerm); 
  };

  // X·ª≠ l√Ω khi g√µ v√†o FORM (Gi·ªØ nguy√™n)
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
  };

  // --- N√ÇNG C·∫§P: H√†m x·ª≠ l√Ω SUBMIT FORM (Th√™m M·ªöI ho·∫∑c C·∫¨P NH·∫¨T) ---
  const handleSubmit = (e) => {
    e.preventDefault();
    setApiError(null);

    // Quy·∫øt ƒë·ªãnh: S·ª≠a (UPDATE) hay Th√™m (CREATE)?
    if (editingId) {
      // --- C·∫¨P NH·∫¨T (UPDATE - PUT) ---
      fetch(`http://localhost:3001/api/employees/${editingId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      })
      .then(async response => {
          const data = await response.json();
          if (!response.ok) throw new Error(data.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
          return data;
      })
      .then(updatedEmployee => {
        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch employees trong state
        setEmployees(employees.map(emp => 
          emp.id === editingId ? updatedEmployee : emp
        ));
        handleCancelEdit(); // X√≥a form v√† reset state
      })
      .catch(error => {
        console.error("L·ªói khi c·∫≠p nh·∫≠t nh√¢n vi√™n:", error);
        setApiError(error.message);
      });

    } else {
      // --- TH√äM M·ªöI (CREATE - POST) ---
      fetch('http://localhost:3001/api/employees', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      })
      .then(async response => {
          const data = await response.json();
          if (!response.ok) throw new Error(data.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
          return data;
      })
      .then(newEmployee => {
        setEmployees([newEmployee, ...employees]); 
        setFormData(initialFormData); // Reset form
      })
      .catch(error => {
        console.error("L·ªói khi th√™m nh√¢n vi√™n:", error);
        setApiError(error.message);
      });
    }
  };

  // X·ª≠ l√Ω X√ìA
  const handleDelete = (employeeId) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√¢n vi√™n n√†y?')) {
      return;
    }
    setApiError(null); 
    fetch(`http://localhost:3001/api/employees/${employeeId}`, {
      method: 'DELETE',
    })
    .then(async response => {
      if (response.status === 204) {
        setEmployees(employees.filter(emp => emp.id !== employeeId));
      } else {
        const data = await response.json();
        throw new Error(data.error || 'L·ªói khi x√≥a');
      }
    })
    .catch(error => {
      console.error("L·ªói khi x√≥a nh√¢n vi√™n:", error);
      setApiError(error.message);
    });
  };

  // --- TH√äM M·ªöI: H√†m khi nh·∫•n n√∫t "S·ª¨A" ---
  const handleEditClick = (employee) => {
    setEditingId(employee.id); 
    setFormData(employee);
    setApiError(null);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // --- TH√äM M·ªöI: H√†m khi nh·∫•n n√∫t "H·ª¶Y B·ªé" (khi ƒëang s·ª≠a) ---
  const handleCancelEdit = () => {
    setEditingId(null); // T·∫Øt ch·∫ø ƒë·ªô s·ª≠a
    setFormData(initialFormData); // Reset form
    setApiError(null); // X√≥a l·ªói
  };


  if (loading) return <p>ƒêang t·∫£i danh s√°ch nh√¢n s·ª±...</p>;
  if (error) return <p style={{ color: 'red' }}>{error}</p>;

  // --- GIAO DI·ªÜN (RENDER) ---
  return (
    <div>
      {/* --- FORM TH√äM M·ªöI / C·∫¨P NH·∫¨T --- */}
      <h2>{editingId ? 'C·∫≠p nh·∫≠t Nh√¢n s·ª±' : 'Th√™m Nh√¢n s·ª± M·ªõi'}</h2>
      
      <div style={styles.formContainer}>
        <form onSubmit={handleSubmit}>
          {apiError && <p style={{ color: 'red' }}>L·ªói: {apiError}</p>}
          
          <div style={styles.formGrid}>
            <div style={styles.formGroup}>
              <label htmlFor="employee_code" style={styles.label}>M√£ NV (*)</label>
              <input type="text" id="employee_code" name="employee_code" 
                     value={formData.employee_code} onChange={handleInputChange} required 
                     style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label htmlFor="full_name" style={styles.label}>H·ªç t√™n (*)</label>
              <input type="text" id="full_name" name="full_name" 
                     value={formData.full_name} onChange={handleInputChange} required 
                     style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label htmlFor="department" style={styles.label}>Ph√≤ng ban</label>
              <input type="text" id="department" name="department" 
                     value={formData.department} onChange={handleInputChange} 
                     style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label htmlFor="position" style={styles.label}>Ch·ª©c v·ª•</label>
              <input type="text" id="position" name="position" 
                     value={formData.position} onChange={handleInputChange} 
                     style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label htmlFor="email" style={styles.label}>Email</label>
              <input type="email" id="email" name="email" 
                     value={formData.email} onChange={handleInputChange} 
                     style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label htmlFor="phone" style={styles.label}>S·ªë ƒëi·ªán tho·∫°i</label>
              <input type="text" id="phone" name="phone" 
                     value={formData.phone} onChange={handleInputChange} 
                     style={styles.input} />
            </div>
          </div>
          
          {/* N√∫t Submit (thay ƒë·ªïi text) */}
          <button type="submit" style={{ ...styles.button, ...styles.btnPrimary, marginTop: '15px' }}>
            {editingId ? 'üíæ L∆∞u C·∫≠p nh·∫≠t' : '‚ûï Th√™m Nh√¢n s·ª±'}
          </button>
          
          {/* N√∫t H·ªßy (ch·ªâ hi·ªán khi ƒëang s·ª≠a) */}
          {editingId && (
            <button type="button" 
                    style={{ ...styles.button, ...styles.btnSecondary, marginTop: '15px' }}
                    onClick={handleCancelEdit}>
              H·ªßy
            </button>
          )}
        </form>
      </div>

      {/* --- THANH T√åM KI·∫æM --- */}
      <h2>Danh s√°ch Nh√¢n s·ª±</h2>
      <div style={styles.searchContainer}>
        <form onSubmit={handleSearchSubmit}>
          <div style={{...styles.formGroup, flexDirection: 'row', gap: '10px' }}>
            <input 
              type="text" 
              placeholder="T√¨m theo T√™n, M√£ NV, Email..." 
              style={{ ...styles.input, flex: 1 }}
              value={searchTerm}
              onChange={handleSearchChange}
            />
            <button type="submit" style={{...styles.button, ...styles.btnPrimary}}>
              T√¨m ki·∫øm
            </button>
          </div>
        </form>
      </div>

      {/* --- B·∫¢NG DANH S√ÅCH --- */}
      <table style={styles.table}>
        <thead>
          <tr>
            <th style={styles.tableHeader}>M√£ NV</th>
            <th style={styles.tableHeader}>H·ªç t√™n</th>
            <th style={styles.tableHeader}>Ph√≤ng ban</th>
            <th style={styles.tableHeader}>Ch·ª©c v·ª•</th>
            <th style={styles.tableHeader}>Email</th>
            <th style={styles.tableHeader}>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {employees.map(emp => (
            <tr key={emp.id}>
              <td style={styles.tableCell}>{emp.employee_code}</td>
              <td style={styles.tableCell}>{emp.full_name}</td>
              <td style={styles.tableCell}>{emp.department}</td>
              <td style={styles.tableCell}>{emp.position}</td>
              <td style={styles.tableCell}>{emp.email}</td>
              <td style={styles.tableCell}>
                {/* --- N√öT S·ª¨A --- */}
                <button style={{ ...styles.button, ...styles.btnWarning }}
                        onClick={() => handleEditClick(emp)}> {/* G·ªçi h√†m s·ª≠a */}
                  S·ª≠a
                </button>
                {/* --- N√öT X√ìA --- */}
                <button style={{ ...styles.button, ...styles.btnDanger }}
                        onClick={() => handleDelete(emp.id)}>
                  X√≥a
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default EmployeeList;

