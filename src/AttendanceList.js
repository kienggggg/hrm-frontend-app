import React, { useState, useEffect } from 'react';

// L·∫•y URL API t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, n·∫øu kh√¥ng c√≥ th√¨ d√πng localhost (cho development)
const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3001';

// S·ª≠ d·ª•ng chung styles
const styles = {
  table: { width: '100%', borderCollapse: 'collapse', marginTop: '20px' },
  tableCell: { border: '1px solid #ddd', padding: '12px', textAlign: 'left' },
  tableHeader: { border: '1px solid #ddd', padding: '12px', textAlign: 'left', backgroundColor: '#004aad', color: 'white', fontWeight: 'bold' },
  formContainer: { background: '#f9f9f9', padding: '20px', borderRadius: '8px', marginBottom: '20px' },
  formGrid: { display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '15px' },
  formGroup: { display: 'flex', flexDirection: 'column' },
  label: { marginBottom: '5px', fontWeight: '600' },
  input: { padding: '8px', border: '1px solid #ccc', borderRadius: '4px' },
  select: { padding: '8px', border: '1px solid #ccc', borderRadius: '4px', backgroundColor: 'white' },
    textarea: { padding: '8px', border: '1px solid #ccc', borderRadius: '4px', fontFamily: 'inherit' }, // Style cho textarea
  button: { padding: '8px 12px', border: 'none', borderRadius: '4px', cursor: 'pointer', color: 'white', marginRight: '5px' },
  btnPrimary: { backgroundColor: '#004aad' },
  btnDanger: { backgroundColor: '#f44336' },
  btnWarning: { backgroundColor: '#ff9800' },
  btnSecondary: { backgroundColor: '#6c757d' },
  searchContainer: { marginBottom: '20px' }
};

// State ban ƒë·∫ßu cho form Ch·∫•m c√¥ng
const initialFormData = {
  employee_id: '',
  date: new Date().toISOString().split('T')[0], // M·∫∑c ƒë·ªãnh l√† ng√†y h√¥m nay
  status: 'ƒêi l√†m', // M·∫∑c ƒë·ªãnh
  notes: ''
};

// Danh s√°ch c√°c tr·∫°ng th√°i ch·∫•m c√¥ng
const attendanceStatuses = ['ƒêi l√†m', 'Ngh·ªâ ph√©p', 'Ngh·ªâ ·ªëm', 'ƒêi mu·ªôn', 'V·ªÅ s·ªõm', 'V·∫Øng'];

function AttendanceList() {
  // State cho danh s√°ch ch·∫•m c√¥ng
  const [attendances, setAttendances] = useState([]);
  // State cho danh s√°ch nh√¢n vi√™n (cho dropdown)
  const [employees, setEmployees] = useState([]);

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // State cho Form, S·ª≠a, T√¨m ki·∫øm
  const [formData, setFormData] = useState(initialFormData);
  const [apiError, setApiError] = useState(null);
  const [editingId, setEditingId] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');

  // H√†m fetch (READ) Ch·∫•m c√¥ng
  const fetchAttendances = (currentSearchTerm) => {
    setLoading(true);
    setError(null);
    const encodedSearchTerm = encodeURIComponent(currentSearchTerm);
    // Thay ƒë·ªïi URL API
    fetch(`${apiUrl}/api/attendance?search=${encodedSearchTerm}`)
      .then(response => {
           if (!response.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ch·∫•m c√¥ng');
           return response.json();
       })
      .then(data => {
        setAttendances(data); // C·∫≠p nh·∫≠t state ch·∫•m c√¥ng
        setLoading(false);
      })
      .catch(error => {
        console.error("L·ªói API Ch·∫•m c√¥ng:", error);
        setError(error.message);
        setLoading(false);
      });
  };

  // H√†m fetch (READ) Nh√¢n vi√™n (gi·ªØ nguy√™n)
  const fetchEmployees = () => {
    fetch('${apiUrl}/api/employees?search=')
      .then(response => {
           if (!response.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n');
           return response.json();
       })
      .then(data => setEmployees(data))
      .catch(error => {
          console.error("L·ªói API Nh√¢n s·ª± (dropdown):", error);
          setError(prev => prev ? `${prev}. ${error.message}` : error.message);
      });
  };

  // Ch·∫°y c·∫£ 2 fetch khi t·∫£i component
  useEffect(() => {
    fetchAttendances('');
    fetchEmployees();
  }, []);

  // X·ª≠ l√Ω t√¨m ki·∫øm
  const handleSearchChange = (e) => setSearchTerm(e.target.value);
  const handleSearchSubmit = (e) => { e.preventDefault(); fetchAttendances(searchTerm); };

  // X·ª≠ l√Ω g√µ v√†o form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({ ...prevData, [name]: value }));
  };

  // X·ª≠ l√Ω SUBMIT FORM (Th√™m/S·ª≠a)
  const handleSubmit = (e) => {
    e.preventDefault();
    setApiError(null);

    const dataToSubmit = { ...formData };
    // ƒê·∫£m b·∫£o notes kh√¥ng ph·∫£i l√† undefined (n·∫øu ng∆∞·ªùi d√πng kh√¥ng nh·∫≠p g√¨)
     dataToSubmit.notes = dataToSubmit.notes || '';


    const method = editingId ? 'PUT' : 'POST';
    // Thay ƒë·ªïi URL API
    const url = editingId
      ? `http://localhost:3001/api/attendance/${editingId}`
      : 'http://localhost:3001/api/attendance';

    fetch(url, {
      method: method,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(dataToSubmit),
    })
    .then(async response => {
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ error: 'L·ªói kh√¥ng x√°c ƒë·ªãnh' }));
            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }
        if (response.status === 204) return null;
        return response.json();
    })
    .then(resultData => {
       if (resultData) {
            if (editingId) {
                // C·∫≠p nh·∫≠t state ch·∫•m c√¥ng
                setAttendances(attendances.map(att => att.id === editingId ? resultData : att));
                handleCancelEdit();
            } else {
                // Th√™m v√†o state ch·∫•m c√¥ng
                setAttendances([resultData, ...attendances]);
                setFormData(initialFormData); // Reset form gi·ªØ l·∫°i ng√†y h√¥m nay
            }
       }
    })
    .catch(error => {
      console.error(`L·ªói khi ${editingId ? 'c·∫≠p nh·∫≠t' : 'th√™m'} ch·∫•m c√¥ng:`, error);
      setApiError(error.message);
    });
  };

  // X·ª≠ l√Ω X√ìA
  const handleDelete = (attendanceId) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b·∫£n ghi ch·∫•m c√¥ng n√†y?')) return;
    setApiError(null);
    // Thay ƒë·ªïi URL API
    fetch(`${apiUrl}/api/attendance/${attendanceId}`, { method: 'DELETE' })
    .then(async response => {
      if (response.status === 204) {
        // C·∫≠p nh·∫≠t state ch·∫•m c√¥ng
        setAttendances(attendances.filter(att => att.id !== attendanceId));
      } else {
         const errorData = await response.json().catch(() => ({ error: 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi x√≥a' }));
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }
    })
    .catch(error => {
      console.error("L·ªói khi x√≥a ch·∫•m c√¥ng:", error);
      setApiError(error.message);
    });
  };

  // H√†m khi nh·∫•n "S·ª¨A"
  const handleEditClick = (attendance) => {
    setEditingId(attendance.id);
    const formattedAttendance = {
        ...attendance,
        employee_id: attendance.employee_id ? String(attendance.employee_id) : '',
        date: attendance.date ? attendance.date.split('T')[0] : '',
        notes: attendance.notes || '' // ƒê·∫£m b·∫£o notes l√† chu·ªói
    };
    setFormData(formattedAttendance);
    setApiError(null);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // H√†m khi nh·∫•n "H·ª¶Y"
  const handleCancelEdit = () => {
    setEditingId(null);
    setFormData(initialFormData);
    setApiError(null);
  };

  // --- GIAO DI·ªÜN (RENDER) ---
  const renderLoading = () => <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;
  const renderError = () => <p style={{ color: 'red' }}>L·ªói: {error || apiError}</p>;

  return (
    <div>
      {/* --- FORM TH√äM M·ªöI / C·∫¨P NH·∫¨T --- */}
      <h2>{editingId ? 'C·∫≠p nh·∫≠t Ch·∫•m c√¥ng' : 'Th√™m Ch·∫•m c√¥ng'}</h2>

      <div style={styles.formContainer}>
        <form onSubmit={handleSubmit}>
          {(apiError || error) && renderError()}

          {/* Thay ƒë·ªïi Grid layout cho ph√π h·ª£p */}
          <div style={{...styles.formGrid, gridTemplateColumns: '1fr 1fr 1fr'}}>
            <div style={styles.formGroup}>
              <label htmlFor="employee_id" style={styles.label}>Nh√¢n vi√™n (*)</label>
              <select id="employee_id" name="employee_id" value={formData.employee_id} onChange={handleInputChange} required style={styles.select}>
                <option value="">-- Ch·ªçn nh√¢n vi√™n --</option>
                {employees.map(emp => (
                  <option key={emp.id} value={emp.id}>{emp.employee_code} - {emp.full_name}</option>
                ))}
              </select>
            </div>
             <div style={styles.formGroup}>
              <label htmlFor="date" style={styles.label}>Ng√†y (*)</label>
              <input type="date" id="date" name="date" value={formData.date} onChange={handleInputChange} required style={styles.input} />
            </div>
            <div style={styles.formGroup}>
              <label htmlFor="status" style={styles.label}>Tr·∫°ng th√°i (*)</label>
              <select id="status" name="status" value={formData.status} onChange={handleInputChange} required style={styles.select}>
                {/* L·∫∑p qua danh s√°ch tr·∫°ng th√°i */}
                {attendanceStatuses.map(status => (
                    <option key={status} value={status}>{status}</option>
                ))}
              </select>
            </div>
            {/* Ghi ch√∫ chi·∫øm to√†n b·ªô h√†ng d∆∞·ªõi */}
            <div style={{ ...styles.formGroup, gridColumn: '1 / -1' }}>
                <label htmlFor="notes" style={styles.label}>Ghi ch√∫</label>
                <textarea id="notes" name="notes" value={formData.notes} onChange={handleInputChange} rows="3" style={styles.textarea}></textarea>
            </div>

          </div>

          <button type="submit" style={{ ...styles.button, ...styles.btnPrimary, marginTop: '15px' }}>
            {editingId ? 'üíæ L∆∞u C·∫≠p nh·∫≠t' : '‚ûï Th√™m Ch·∫•m c√¥ng'}
          </button>
          {editingId && (
            <button type="button" style={{ ...styles.button, ...styles.btnSecondary, marginTop: '15px' }} onClick={handleCancelEdit}>H·ªßy</button>
          )}
        </form>
      </div>

      {/* --- THANH T√åM KI·∫æM --- */}
      <h2>Danh s√°ch Ch·∫•m c√¥ng</h2>
      <div style={styles.searchContainer}>
        <form onSubmit={handleSearchSubmit}>
          <div style={{...styles.formGroup, flexDirection: 'row', gap: '10px' }}>
            <input type="text" placeholder="T√¨m theo T√™n NV, M√£ NV, Tr·∫°ng th√°i..." style={{ ...styles.input, flex: 1 }} value={searchTerm} onChange={handleSearchChange}/>
            <button type="submit" style={{...styles.button, ...styles.btnPrimary}}>T√¨m ki·∫øm</button>
            <button type="button" style={{ ...styles.button, ...styles.btnSecondary}} onClick={() => { setSearchTerm(''); fetchAttendances(''); }}>X√≥a t√¨m ki·∫øm</button>
          </div>
        </form>
      </div>

      {/* --- B·∫¢NG DANH S√ÅCH --- */}
      {loading && attendances.length === 0 ? renderLoading() : error ? null : (
          <table style={styles.table}>
            <thead>
              <tr>
                <th style={styles.tableHeader}>Ng√†y</th>
                <th style={styles.tableHeader}>M√£ NV</th>
                <th style={styles.tableHeader}>T√™n nh√¢n vi√™n</th>
                <th style={styles.tableHeader}>Tr·∫°ng th√°i</th>
                <th style={styles.tableHeader}>Ghi ch√∫</th>
                <th style={styles.tableHeader}>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {attendances.length === 0 && !loading ? (
                  <tr><td colSpan="6" style={{...styles.tableCell, textAlign: 'center'}}>Kh√¥ng t√¨m th·∫•y b·∫£n ghi ch·∫•m c√¥ng n√†o.</td></tr>
              ) : (
                  attendances.map(att => (
                    <tr key={att.id}>
                      <td style={styles.tableCell}>{att.date ? new Date(att.date).toLocaleDateString('vi-VN') : ''}</td>
                      <td style={styles.tableCell}>{att.employee_code}</td>
                      <td style={styles.tableCell}>{att.employee_name}</td>
                      <td style={styles.tableCell}>{att.status}</td>
                      <td style={styles.tableCell}>{att.notes || '-'}</td> {/* Hi·ªÉn th·ªã '-' n·∫øu kh√¥ng c√≥ ghi ch√∫ */}
                      <td style={styles.tableCell}>
                        <button style={{ ...styles.button, ...styles.btnWarning }} onClick={() => handleEditClick(att)}>S·ª≠a</button>
                        <button style={{ ...styles.button, ...styles.btnDanger }} onClick={() => handleDelete(att.id)}>X√≥a</button>
                      </td>
                    </tr>
                  ))
              )}
            </tbody>
          </table>
        )}
    </div>
  );
}

export default AttendanceList;
